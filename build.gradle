plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

apply plugin: 'application'

application {
    mainClass.set('com.microsoft.playwright.CLI')
}

run {
    if (project.hasProperty("execArgs")) {
        args project.execArgs.split()
    }
}

task playwrightInstall(type: Exec) {
    commandLine 'npm', 'install', 'playwright'
}

dependencies {
    implementation 'com.microsoft.playwright:playwright:1.42.0'
    implementation group: 'org.testng', name: 'testng', version: '7.9.0'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.3'
    testImplementation 'io.qameta.allure:allure-testng:2.25.0'
}

test {
    useTestNG()
    systemProperty 'allure.results.directory', 'build/allure-results'
}

tasks.withType(Test) {
    finalizedBy 'allureReport'
}

allureReport {
    reportDir = file('build/allure-report')
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/resources'
        }
        java {
            srcDirs = ['src/test/java']
        }
    }
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
ext {
// !  ADD DEFAULT VALUES FOR VARIABLES HERE
    browserType = project.hasProperty('browserType') ? project.getProperty('browserType') : 'chrome'
}

def registerTask(String taskName, String suitePath) {
    tasks.register(taskName, Test) {
        useTestNG() {
            suites suitePath
        }
        if (project.hasProperty('browserType')) {
            systemProperty 'browserType', project.findProperty('browserType')
        }
        if (project.hasProperty('headless')) {
            systemProperty 'headless', project.findProperty('headless')
        }
        if (project.hasProperty('devtools')) {
            systemProperty 'devtools', project.findProperty('devtools')
        }
        if (project.hasProperty('slowdown')) {
            systemProperty 'slowdown', project.findProperty('slowdown')
        }
        if (project.hasProperty('allure_report')) {
            systemProperty 'allure_report', project.findProperty('allure_report')
        }
        if (project.hasProperty('trace')) {
            systemProperty 'trace', project.findProperty('trace')
        }
        if (project.hasProperty('screenshot')) {
            systemProperty 'screenshot', project.findProperty('screenshot')
        }
        if (project.hasProperty('video')) {
            systemProperty 'video', project.findProperty('video')
        }
        if (project.hasProperty('page')) {
            systemProperty 'page', project.findProperty('page')
        }
        if (project.hasProperty('har')) {
            systemProperty 'har', project.findProperty('har')
        }
    }
}

registerTask('login_users', 'src/test/resources/login_users.xml')
